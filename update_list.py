import os
import json
import mysql.connector
from datetime import datetime

# 数据库配置 (保留，用于生成SQL文件中的数据库名参考)
DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': '',
    'database': 'wallpaper_db'
}

# 预定义的分类和标签映射
CATEGORY_TAGS = {
    '风景': ['自然', '山水', '天空', '海洋', '森林', '日出', '日落'],
    '动物': ['宠物', '野生动物', '鸟类', '海洋生物'],
    '建筑': ['城市', '建筑', '室内', '街道'],
    '艺术': ['抽象', '艺术', '创意', '设计'],
    '人物': ['人像', '肖像', '生活'],
    '科技': ['科技', '未来', '科幻'],
    '美食': ['食物', '饮料', '甜点'],
    '运动': ['体育', '运动', '健身'],
    '其他': ['其他']
}

def analyze_filename(filename):
    """根据文件名判断分类和标签"""
    filename_lower = filename.lower()
    category = '其他'
    tags = []

    # 根据文件名关键词判断分类
    if any(keyword in filename_lower for keyword in ['landscape', 'nature', 'mountain', 'sea', 'sky', '风景']):
        category = '风景'
    elif any(keyword in filename_lower for keyword in ['animal', 'pet', 'bird', 'wildlife', '动物', '犬', '猪', '鹿', '狐狸', '猫', '狼人']):
        category = '动物'
    elif any(keyword in filename_lower for keyword in ['building', 'city', 'architecture', 'street', '建筑', '城市']):
        category = '建筑'
    elif any(keyword in filename_lower for keyword in ['art', 'abstract', 'design', '艺术', '魔物', '折翼天使', '时光之翼', '星芒破晓', '炭笔', '血色残阳', '详云字体', '睡梦公式']):
        category = '艺术'
    elif any(keyword in filename_lower for keyword in ['portrait', 'people', 'person', '人物', '美女', '少年', '公主', '御姐', '克杰逊', '杰克逊', '神秘人', '赛博人机女', '雨夜撑伞女']):
        category = '人物'
    elif any(keyword in filename_lower for keyword in ['tech', 'future', 'sci-fi', '科技', '太空航行', '赛博']):
        category = '科技'
    elif any(keyword in filename_lower for keyword in ['food', 'drink', 'dessert', '美食']):
        category = '美食'
    elif any(keyword in filename_lower for keyword in ['sport', 'fitness', 'exercise', '运动']):
        category = '运动'
    elif any(keyword in filename_lower for keyword in ['巨兽', '巨眼', '废土', '恶魔', '鲛人']):
        # 对于包含这些关键词的文件名，可能需要更具体的分类，这里暂时归入其他或新增一个分类
        # 考虑到文件名，暂时归入"幻想"或"其他"
        category = '其他' # 或者新增一个分类如 '幻想'

    # 添加基于文件名识别的标签 (更细粒度的关键词)
    if '4k' in filename_lower:
        tags.append('4K')
    if '1080p' in filename_lower:
        tags.append('1080P')
    if '美女' in filename_lower or '御姐' in filename_lower or '公主' in filename_lower or '少年' in filename_lower:
        tags.append('人像')
    if '折翼天使' in filename_lower or '恶魔' in filename_lower or '鲛人' in filename_lower or '巨兽' in filename_lower:
        tags.append('幻想')
    if '竹编' in filename_lower:
        tags.append('竹编')
    if '赛博' in filename_lower:
        tags.append('赛博')
    if '雨夜' in filename_lower:
        tags.append('雨夜')

    # 添加基于分类的默认标签
    if category in CATEGORY_TAGS:
        tags.extend(CATEGORY_TAGS[category])

    # 去重并返回
    return {
        'category': category,
        'tags': list(set(tags))
    }

def update_wallpaper_list():
    """更新壁纸列表（JSON）并生成SQL导入文件"""
    # 壁纸目录路径
    wallpapers_dir = os.path.join(os.path.dirname(__file__), 'static', 'wallpapers')
    # list.json路径
    list_path = os.path.join(os.path.dirname(__file__), 'static', 'data', 'list.json')
    # SQL输出文件路径
    sql_path = os.path.join(os.path.dirname(__file__), 'wallpapers_import.sql')

    files = []
    sql_statements = []
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # 添加SQL文件头部注释
    sql_statements.append(f"-- SQL statements to import wallpaper data\n")
    sql_statements.append(f"-- Generated by update_list.py on {current_time}\n")
    sql_statements.append(f"-- Database: {DB_CONFIG['database']}\n\n")

    # 添加USE database语句
    sql_statements.append(f"USE `{DB_CONFIG['database']}`;\n\n")

    # 添加DELETE语句清空现有数据 (可选，如果希望每次都全新导入)
    sql_statements.append(f"-- Optional: Clear existing data before inserting\n")
    sql_statements.append(f"-- DELETE FROM `wallpapers`;\n\n")

    sql_statements.append("INSERT INTO `wallpapers` (`title`, `file_path`, `category`, `tags`, `width`, `height`, `likes`, `views`, `created_at`, `updated_at`) VALUES\n")

    # 检查目录是否存在
    if not os.path.exists(wallpapers_dir):
        print(f"Error: Wallpaper directory not found at {wallpapers_dir}")
        return

    image_files = [f for f in os.listdir(wallpapers_dir) if os.path.isfile(os.path.join(wallpapers_dir, f)) and f.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp'))]

    print(f"Found {len(image_files)} image files in {wallpapers_dir}.")

    if not image_files:
        print("No supported image files found. Exiting.")
        return

    for i, filename in enumerate(image_files):
        print(f"Processing file: {filename}")
        file_path = os.path.join(wallpapers_dir, filename)
        relative_path = os.path.join('static', 'wallpapers', filename).replace('\\', '/')
        name_without_ext = os.path.splitext(filename)[0]

        # 根据文件名分析分类和标签
        analysis_result = analyze_filename(filename)
        category = analysis_result['category']
        tags_list = analysis_result['tags']
        tags_string = ','.join(tags_list) # 用于SQL

        # 准备JSON文件信息
        file_info = {
            'filename': filename,
            'path': relative_path,
            'name': name_without_ext,
            'category': category,
            'tags': tags_list # JSON中保留列表格式
        }
        files.append(file_info)

        # 准备SQL INSERT VALUES 语句
        # 注意：width, height, likes, views 暂时设置为默认值或0
        sql_values = f"  ('{name_without_ext}', '{relative_path}', '{category}', '{tags_string}', 0, 0, 0, 0, '{current_time}', '{current_time}')"
        sql_statements.append(sql_values)

        # 添加逗号或分号
        if i < len(image_files) - 1:
            sql_statements.append(",\n")
        else:
            sql_statements.append(";\n")

    try:
        # 写入list.json
        with open(list_path, 'w', encoding='utf-8') as f:
            json.dump(files, f, ensure_ascii=False, indent=2)

        print(f'更新成功！共处理 {len(files)} 个图片文件。')
        print(f'list.json 已更新到: {os.path.abspath(list_path)}')

        # 写入SQL文件
        with open(sql_path, 'w', encoding='utf-8') as f:
            f.writelines(sql_statements)

        print(f'SQL导入文件已生成到: {os.path.abspath(sql_path)}')
        print("请将此文件导入到您的MySQL数据库中。\n")

    except Exception as e:
        print(f'更新失败：{str(e)}')

if __name__ == '__main__':
    update_wallpaper_list() 