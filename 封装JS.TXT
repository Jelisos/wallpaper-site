我来帮您分析yulan.html页面的JavaScript代码，并提供无损封装的最佳实践方案。

分析当前代码结构：
1. 代码直接嵌入在HTML文件中
2. 所有功能都在一个大的DOMContentLoaded事件监听器中
3. 包含多个功能模块：设备预览、图片上传、下载功能等
4. 使用了大量的全局变量和函数

让我们按步骤进行封装：

### 第一步：创建模块化的文件结构

```
static/
  └── js/
      ├── yulan/
      │   ├── index.js          # 主入口文件
      │   ├── config.js         # 配置文件
      │   ├── utils.js          # 工具函数
      │   ├── canvas.js         # Canvas相关功能
      │   ├── device.js         # 设备预览功能
      │   ├── upload.js         # 上传功能
      │   └── download.js       # 下载功能
      └── yulan.js             # 打包后的文件
```

### 第二步：创建配置文件 (config.js)

```javascript
/**
 * 预览页面配置
 */
export const CONFIG = {
    // 设备尺寸配置
    deviceSizes: {
        phone: {
            width: 300,
            height: 620,
            bezelWidth: 8,
            cornerRadius: 40
        },
        tablet: {
            width: 420,
            height: 560,
            bezelWidth: 12,
            cornerRadius: 25
        },
        laptop: {
            width: 550,
            height: 360,
            screenHeight: 320,
            bezelWidth: 8,
            baseHeight: 40
        },
        moment: {
            width: 550,
            height: 372,
            barHeight: 100,
            avatarSize: 80,
            avatarRadius: 20,
            avatarMargin: 24
        }
    },

    // 微信相关尺寸
    avatarSize: {
        width: 300,
        height: 300,
        radius: 150,
        roundRadius: 20
    }
};
```

### 第三步：创建工具函数 (utils.js)

```javascript
/**
 * 工具函数集合
 */
export const Utils = {
    /**
     * 设置Canvas为高清
     */
    setCanvasHD(canvas, width, height) {
        const dpr = window.devicePixelRatio || 1;
        canvas.width = width * dpr;
        canvas.height = height * dpr;
        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
        const ctx = canvas.getContext('2d');
        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
        return ctx;
    },

    /**
     * 绘制圆角矩形
     */
    roundRect(ctx, x, y, width, height, radius) {
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.arcTo(x + width, y, x + width, y + radius, radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.arcTo(x + width, y + height, x + width - radius, y + height, radius);
        ctx.lineTo(x + radius, y + height);
        ctx.arcTo(x, y + height, x, y + height - radius, radius);
        ctx.lineTo(x, y + radius);
        ctx.arcTo(x, y, x + radius, y, radius);
        ctx.closePath();
    },

    /**
     * 导出Canvas为图片
     */
    exportCanvasAsImage(canvas, filename, format = 'image/png', quality = 1.0) {
        let dataURL;
        try {
            dataURL = format === 'image/jpeg' 
                ? canvas.toDataURL(format, quality)
                : canvas.toDataURL(format);
        } catch (err) {
            throw new Error('导出失败：' + err.message);
        }
        
        const link = document.createElement('a');
        link.download = filename;
        link.href = dataURL;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
};
```

### 第四步：创建Canvas相关功能 (canvas.js)

```javascript
import { CONFIG } from './config.js';
import { Utils } from './utils.js';

/**
 * Canvas绘制功能
 */
export class CanvasManager {
    constructor() {
        this.canvases = {};
        this.contexts = {};
        this.initCanvases();
    }

    initCanvases() {
        const devices = ['phone', 'tablet', 'laptop', 'moment'];
        devices.forEach(device => {
            const canvas = document.getElementById(`${device}Canvas`);
            if (canvas) {
                this.canvases[device] = canvas;
                this.contexts[device] = Utils.setCanvasHD(
                    canvas,
                    CONFIG.deviceSizes[device].width,
                    CONFIG.deviceSizes[device].height
                );
            }
        });
    }

    // 其他Canvas相关方法...
}
```

### 第五步：创建设备预览功能 (device.js)

```javascript
import { CONFIG } from './config.js';
import { Utils } from './utils.js';

/**
 * 设备预览功能
 */
export class DeviceManager {
    constructor(canvasManager) {
        this.canvasManager = canvasManager;
        this.currentDevice = 'phone';
        this.initDeviceTabs();
    }

    initDeviceTabs() {
        const tabs = document.querySelectorAll('.device-tab');
        tabs.forEach(tab => {
            tab.addEventListener('click', () => this.switchDevice(tab));
        });
    }

    switchDevice(tab) {
        const device = tab.getAttribute('data-device');
        this.currentDevice = device;
        // 切换设备逻辑...
    }

    // 其他设备相关方法...
}
```

### 第六步：创建上传功能 (upload.js)

```javascript
/**
 * 上传功能
 */
export class UploadManager {
    constructor() {
        this.uploadArea = document.getElementById('uploadArea');
        this.uploadButton = document.getElementById('uploadButton');
        this.wallpaperUpload = document.getElementById('wallpaperUpload');
        this.initUploadEvents();
    }

    initUploadEvents() {
        this.uploadButton.addEventListener('click', () => this.wallpaperUpload.click());
        this.wallpaperUpload.addEventListener('change', () => this.handleFileUpload());
        this.initDragAndDrop();
    }

    // 其他上传相关方法...
}
```

### 第七步：创建下载功能 (download.js)

```javascript
import { Utils } from './utils.js';

/**
 * 下载功能
 */
export class DownloadManager {
    constructor(canvasManager) {
        this.canvasManager = canvasManager;
        this.initDownloadButtons();
    }

    initDownloadButtons() {
        const buttons = {
            phone: document.getElementById('downloadPhoneButton'),
            tablet: document.getElementById('downloadTabletButton'),
            laptop: document.getElementById('downloadLaptopButton'),
            // 其他下载按钮...
        };

        Object.entries(buttons).forEach(([device, button]) => {
            button.addEventListener('click', () => this.downloadDevice(device));
        });
    }

    // 其他下载相关方法...
}
```

### 第八步：创建主入口文件 (index.js)

```javascript
import { CanvasManager } from './canvas.js';
import { DeviceManager } from './device.js';
import { UploadManager } from './upload.js';
import { DownloadManager } from './download.js';

/**
 * 预览页面主管理器
 */
export class YulanManager {
    constructor() {
        this.canvasManager = new CanvasManager();
        this.deviceManager = new DeviceManager(this.canvasManager);
        this.uploadManager = new UploadManager();
        this.downloadManager = new DownloadManager(this.canvasManager);
        
        this.init();
    }

    init() {
        // 初始化页面
        this.loadImageFromUrl();
    }

    // 其他初始化方法...
}

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', () => {
    window.yulanManager = new YulanManager();
});
```

### 第九步：修改yulan.html

```html
<!-- 在body结束标签前添加 -->
<script type="module" src="static/js/yulan/index.js"></script>
```

### 第十步：打包配置

使用webpack或rollup等工具进行打包，创建打包配置文件：

```javascript
// webpack.config.js
module.exports = {
    entry: './static/js/yulan/index.js',
    output: {
        path: __dirname + '/static/js',
        filename: 'yulan.js'
    },
    mode: 'production'
};
```

### 封装后的优势：

1. 代码模块化，便于维护和扩展
2. 各个功能模块职责清晰，降低耦合度
3. 使用ES6模块系统，支持按需加载
4. 配置集中管理，便于修改
5. 工具函数复用性高
6. 支持打包优化，减小文件体积
7. 便于测试和调试

### 使用说明：

1. 将代码按上述结构组织到对应文件中
2. 使用打包工具（如webpack）进行打包
3. 在HTML中引入打包后的文件
4. 所有功能保持不变，但代码结构更清晰

您需要我详细解释某个部分吗？或者需要我提供更具体的实现细节？
